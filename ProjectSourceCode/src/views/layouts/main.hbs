{{> head}}
{{> nav}}
{{{body}}}
{{> footer}}

<!-- ✅ Bootstrap JS for dropdowns (must come last) -->
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"></script>

<!-- ✅ JS for editable profile fields -->
<script>
  document.addEventListener("DOMContentLoaded", function () {
    const editIcons = document.querySelectorAll(".edit-icon");

    editIcons.forEach((icon) => {
      icon.addEventListener("click", function () {
        const input = this.parentElement.querySelector(".editable-field");
        const field = input.getAttribute("data-field");

        input.removeAttribute("readonly");
        input.focus();
        input.select();
        input.classList.add("editing");

        // Password: show current + confirm inputs
        let confirmInput = null;
        let currentInput = null;

        if (field === "password") {
          currentInput = this.parentElement.querySelector(".current-password-input");
          confirmInput = this.parentElement.querySelector(".confirm-password-input");

          if (currentInput) currentInput.style.display = "block";
          if (confirmInput) confirmInput.style.display = "block";
        }

        // Save & Cancel buttons
        const saveBtn = document.createElement("i");
        saveBtn.className = "fa-solid fa-check save-icon";

        const cancelBtn = document.createElement("i");
        cancelBtn.className = "fa-solid fa-xmark cancel-icon";

        this.parentNode.appendChild(saveBtn);
        this.parentNode.appendChild(cancelBtn);
        this.style.display = "none";

        // Cancel logic
        cancelBtn.addEventListener("click", () => {
          input.value = "";
          input.setAttribute("readonly", true);

          if (currentInput) {
            currentInput.value = "";
            currentInput.style.display = "none";
          }

          if (confirmInput) {
            confirmInput.value = "";
            confirmInput.style.display = "none";
          }

          resetUI();
        });

        // Save logic
        saveBtn.addEventListener("click", () => {
          const newPassword = input.value;
          const confirmPassword = confirmInput ? confirmInput.value : newPassword;
          const currentPassword = currentInput ? currentInput.value : null;

          if (newPassword !== confirmPassword) {
            showToast("New passwords do not match", true);
            return;
          }

          if (!currentPassword || currentPassword.trim() === "") {
            showToast("Current password is required", true);
            return;
          }

          fetch('/profile/update', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json'
            },
            body: JSON.stringify({
              field,
              value: newPassword,
              currentPassword: currentPassword
            })
          })
            .then(res => res.json())
            .then(data => {
              if (data.success) {
                showToast("Password updated!");
                input.setAttribute("readonly", true);
                input.value = "";

                if (currentInput) {
                  currentInput.value = "";
                  currentInput.style.display = "none";
                }

                if (confirmInput) {
                  confirmInput.value = "";
                  confirmInput.style.display = "none";
                }
              } else {
                showToast(data.message || "Error saving.", true);
              }

              resetUI();
            })
            .catch(() => {
              showToast("Server error.", true);
              resetUI();
            });
        });

        function resetUI() {
          saveBtn.remove();
          cancelBtn.remove();
          icon.style.display = "inline";
          input.classList.remove("editing");
        }

        function showToast(msg, isError = false) {
          const toast = document.createElement("div");
          toast.textContent = msg;
          toast.className = isError ? "toast-error" : "toast-success";
          document.body.appendChild(toast);
          setTimeout(() => toast.remove(), 2000);
        }
      });
    });
  });
</script>
</body>
</html>
